<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>注解和反射</title>
    <link href="/2020/05/29/Java/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/"/>
    <url>/2020/05/29/Java/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h1 id="一-注解"><a href="#一-注解" class="headerlink" title="一.注解"></a>一.注解</h1><h2 id="1-什么是注解"><a href="#1-什么是注解" class="headerlink" title="1.什么是注解"></a>1.什么是注解</h2><p>◆Annotation是从JDK5.0开始引入的新技术.</p><p>◆Annotation的作用 :</p><p>➢不是程序本身,可以对程序作出解释.(这一-点和注释(comment)没什么区别)</p><p>➢<strong>可以被其他程序(比如:编译器等)读取.</strong></p><p>◆Annotation的格式 :</p><p>➢注解是以<strong>“@注释名”</strong>在代码中存在的,还可以添加一-些参数值,例</p><p>如:@SuppressWarnings(value=”unchecked”). .</p><p>◆Annotation在哪里使用?</p><p>➢可以附加在<strong>package , class , method , field **等上面,相当于给他们添加了额外的辅助信息，我们可以通过</strong>反射机制编程实现**对这些元数据的访问</p><h2 id="2-内置注解"><a href="#2-内置注解" class="headerlink" title="2.内置注解"></a>2.内置注解</h2><p>➢@Override :定义在java.lang.Override中,此注释<strong>只适用于修辞方法</strong>,表示-<strong>一个方法声明打算重写超类中的另一个方法声明</strong>.</p><p>➢@Deprecated :定义在java.lang.Deprecated中,此注释<strong>可以用于修辞方法,属性,类,表示不鼓励程序员使用这样的元素, 通常是因为它很危险或者存在更好的选择.</strong></p><p>➢@SuppressWarnings :定义在java.lang.SuppressWarnings中用来<strong>抑制编译时的警告信息.</strong></p><p>​      与前两个注释有所不同你需要添加一个<strong>参数</strong>才能正确使用，这些参数都是已经定义好了的，我们选择性的使用就好了.</p><ul><li><p>@SuppressWarnings(“all”)</p></li><li><p>@SuppressWarnings(“unchecked”)</p></li><li><p>@SuppressWarnings(value={“unchecked”,”deprecation”})</p></li><li><p>等等….</p></li></ul><h2 id="3-元注解"><a href="#3-元注解" class="headerlink" title="3.元注解"></a>3.元注解</h2><p>◆元注解的作用就是负责注解其他注解, Java定义了4个标准的meta-annotation类型,他们被用来提供对其他annotation类型作说明.</p><p> ◆这些类型和它们所支持的类在java.lang.annotation包中可以找到.</p><p> <strong>( @Target , @Retention，@Documented , @Inherited )</strong><br>          ➢@Target:<strong>用于描述注解的使用范围(即:被描述的注解可以用在什么地方)</strong></p><p>  ➢@Retention :<strong>表示需要在什么级别保存该注释信息,用于描述注解的生命周期</strong></p><p>  ➢<strong>(SOURCE &lt; CLASS &lt; RUNTIME)</strong></p><p>  ➢@Document:说明该注解将被包含在javadoc中</p><p>  ➢@Inherited: 说明子类可以继承父类中的该注解</p><h2 id="4-自定义注解"><a href="#4-自定义注解" class="headerlink" title="4.自定义注解"></a>4.自定义注解</h2><p>➢使用@interface自定义注解时,自动<strong>继承</strong>了<strong>java.lang. annotation.Annotation</strong>接口</p><p>➢分析:</p><ul><li><p><strong>@ interface</strong>用来声明一个注解,<strong>格式: public @ interface注解名{定义内容}</strong></p></li><li><p>其中的每一一个方法实际 上是声明了一一个配置参数.</p></li><li><p>方法的名称就是参数的名称. ；例如  <strong>int age() ,age就是它的参数名称</strong>  </p></li><li><p>返回值类型就是参数的类型(<strong>返回值只能是基本类型,Class , String , enum</strong> ).</p></li><li><p>可以通过<strong>default</strong>来声明参数的默认值。</p></li><li><p>如果只有一-<strong>个参数成员,一般参数名为value</strong>。</p></li><li><p>注解元素必须要有值, 我们定义注解元素时,经常使用空字符串，0作为默认值。</p></li><li><p>如果没有默认值，我们必须自己手动赋值。</p></li><li><p>如果定义到类中不用写public也可以。</p><pre><code class="hljs Java"><span class="hljs-comment">//自定义注解</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test03</span> </span>&#123;<span class="hljs-comment">//注解可以显示赋值，如果没有默认值， 我们就必须给注解赋值</span><span class="hljs-meta">@MyAnnotation</span>2(age = <span class="hljs-number">18</span>,name = <span class="hljs-string">"吕"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;&#125;    <span class="hljs-meta">@MyAnnotation</span>3(<span class="hljs-string">"吕"</span>)<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test2</span><span class="hljs-params">()</span></span>&#123;&#125;<span class="hljs-meta">@Target</span>(&#123;ElementType.TYPE,ElementType.METHOD&#125;)G<span class="hljs-meta">@Retention</span>(RetentionPolicy . RUNTIME)<span class="hljs-meta">@interface</span> MyAnnotation2&#123;<span class="hljs-comment">//注解的参数:参数类型+参数名();</span><span class="hljs-function">String <span class="hljs-title">name</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> ""</span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">age</span><span class="hljs-params">()</span> </span>;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">id</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> -1</span>;<span class="hljs-comment">//如果默认值为-1,代表不存在。</span>String[] schools() <span class="hljs-keyword">default</span> &#123;<span class="hljs-string">"吕"</span>, <span class="hljs-string">"清华大学"</span>&#125;;&#125;<span class="hljs-meta">@Target</span>(&#123;ElementType. TYPE , ElementType .METHOD&#125;)<span class="hljs-meta">@Retention</span>( RetentionPolicy . RUNTIME)<span class="hljs-meta">@interface</span> MyAnnotation3&#123;<span class="hljs-function">String <span class="hljs-title">value</span><span class="hljs-params">()</span> </span>;&#125;</code></pre></li></ul><h1 id="二-静态VS动态语言"><a href="#二-静态VS动态语言" class="headerlink" title="二 .静态VS动态语言"></a>二 .静态VS动态语言</h1><h2 id="1-动态语言"><a href="#1-动态语言" class="headerlink" title="1.动态语言"></a>1.动态语言</h2><p>➢是一类在运行时可以改变其结构的语言:例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是在运行时代码可以根据某些条件改变自身结构。</p><p>➢主要动态语言: Object-C、 C#、 JavaScript、 PHP、Python等。</p><h2 id="2-静态语言"><a href="#2-静态语言" class="headerlink" title="2.静态语言"></a>2.静态语言</h2><p>➢与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、 C、C++.</p><p>➢Java不是动态语言，但Java可以称之为“准动态语言”。即Java有一 定的动态性,我们可以利用反射机制获得类似动态语言的特性。Java的动态性让编程的时候更加灵活!</p><h1 id="三-反射机制"><a href="#三-反射机制" class="headerlink" title="三. 反射机制"></a>三. 反射机制</h1><h2 id="1-Java-Reflection"><a href="#1-Java-Reflection" class="headerlink" title="1.Java Reflection"></a>1.Java Reflection</h2><p>➢Reflection (反射)是Java被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p><p>Class C = Class.forName(jiva.lang.String”)</p><p>➢加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象(<strong>一 个类只有一个Class对象</strong>)，这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个<strong>对象就像一面镜子， 透过这个镜子看到类的结构，所以,我们形象的称之为:反射。</strong></p><blockquote><p>正常方式:引入需 要的”包类”名称一&gt; 通过new实例化取 得实例化对象</p></blockquote><blockquote><p>反射方式:实例化对象一getClass()方法一&gt; 得到完整的“包类”名称</p></blockquote><h2 id="2-Java反射机制研究及应用"><a href="#2-Java反射机制研究及应用" class="headerlink" title="2.Java反射机制研究及应用"></a>2.Java反射机制研究及应用</h2><p>Java反射机制提供的功能</p><p>➢在运行时判断任意-个对象所属的类</p><p>➢在运行时构造任意一个类的对象</p><p>➢在运行时判断任意一个类所具有的成员变量和方法➢在运行时获取泛型信息</p><p>➢在运行时调用任意一个对象的成员变量和方法➢在运行时处理注解</p><p>➢生成动态代理</p><p>➢…</p><h2 id="3-Java反射优点和缺点"><a href="#3-Java反射优点和缺点" class="headerlink" title="3.Java反射优点和缺点"></a>3.Java反射优点和缺点</h2><p>优点:</p><blockquote><p>可以实现动态创建对象和编译，体现出很大的灵活性</p></blockquote><p>缺点:</p><blockquote><p>对性能有影响。使用反射基本上是一-种解释操作，我们可以告诉JVM，我们希望做什么并且它满足我们的要求。这类操作总是慢于直接执行相同的操作。</p></blockquote><h2 id="4-概念"><a href="#4-概念" class="headerlink" title="4.概念"></a>4.概念</h2><p><img src="https://i.loli.net/2020/05/29/mrN6TbQIjh14BAe.png" srcset="/img/loading.gif" alt="image-20200508173019802.png"></p><ul><li><p>源代码阶段：在硬盘中以.class的方式存储 </p></li><li><p>Class类对象阶段和运行阶段：在内存中存储 </p></li></ul><h2 id="5-Class类"><a href="#5-Class类" class="headerlink" title="5.Class类"></a>5.Class类</h2><p>编写完java文件后，jvm是不能直接运行java文件的，首先要将java文件编译成class文件以后，jvm再把class文件<strong>加载</strong>到内存中，<strong>创建一个Class对象</strong>，这时候才可以使用这个类。加载这个动作，就是由<strong>类加载器</strong>完成的。jRE都为其保留一个不变的Class类型的对象。一个Class对象包含了特定某个结构<strong>(class/interface/enum/annotation/primitive type/void/[])</strong>的有关信息。</p><p>➢Class本身也是一-个类</p><p>➢Class 对象只能由系统建立对象</p><p>➢一个加载的类在JVM中只会有一个Class实例</p><p>➢一个Class对象对应的是一 个加载到JVM中的一个.class文件</p><p>➢每个类的实例都会记得自己是由哪个Class实例所生成</p><p>➢通过Class可以完整地得到一个类中的所有被加载的结构</p><p>➢Class类 是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象</p><p>➢基本的 Java 类型（boolean、byte、char、short、int、long、float 和 double）和关键字 void 也都对应一个 Class 对象。<br>        ➢每个<strong>数组</strong>属于被映射为 Class 对象的一个类，所有具有<strong>相同元素类型和维数的数组</strong>都共享该 Class 对象。</p><p><strong>Class类就是用来描述类的信息的。Class也是一种类型，它专门用来描述类的特征。</strong></p><p><img src="https://i.loli.net/2020/05/29/Eha2dLHwVlnfMUS.png" srcset="/img/loading.gif" alt="image-20200510085958436.png"></p><h2 id="6-获取Class对象的功能"><a href="#6-获取Class对象的功能" class="headerlink" title="6.获取Class对象的功能"></a>6.获取Class对象的功能</h2><p><img src="https://i.loli.net/2020/05/29/TRr3WMPf7k4AhbU.png" srcset="/img/loading.gif" alt="image-20200508174941636.png"></p><table><thead><tr><th align="left">方法名</th><th>功能说明</th></tr></thead><tbody><tr><td align="left">static GlassforName(String name)</td><td>返回指定类名rame的Class对象</td></tr><tr><td align="left">Object newlnstance()</td><td>调用缺省构造函数，返回Class对象的一一个实例</td></tr><tr><td align="left">getName()</td><td>返回此Class对象所表示的实体(类，接口，数组类或void)的名称。</td></tr><tr><td align="left">Class getSuperClass()</td><td>返回当前Class对象的父类的Class对象</td></tr><tr><td align="left">Class[] getInterfaces()</td><td>获取当前Class对象的所有接口</td></tr><tr><td align="left">Class Loader getClassLoader()</td><td>返回该类的类加载器</td></tr><tr><td align="left">Constructor[] getConstructors()</td><td>返回一个包含某些Constructor对象的数组，获取有参构造</td></tr><tr><td align="left">Method getMothed(String name,Class.. T)</td><td>返回一-个Method对象，此对象的形参类型为paramType</td></tr><tr><td align="left">Field[] getDeclaredFields()</td><td>返回Field对象属性的一个数组</td></tr><tr><td align="left">setAccessible</td><td>true:打开权限。</td></tr></tbody></table><h2 id="7-getDeclaredxxx和getxxx的区别"><a href="#7-getDeclaredxxx和getxxx的区别" class="headerlink" title="7.getDeclaredxxx和getxxx的区别"></a>7.getDeclaredxxx和getxxx的区别</h2><blockquote><p>getxxx：此方法获取的是所有public方法级别的xxx。</p></blockquote><blockquote><p>getDeclaredxxx：此方法获得的是自身类的所有xxx。包括公有(public)、私有(private)xxx等，而且不受限于访问权限，但是限定本类(可以访问本身类的xxx或者内部类的xxx)。</p></blockquote><p>例子：</p><ul><li>getMethod():此方法获取的是所有<strong>public方法级别的方法，包括从父类继承的方法</strong>。 </li><li>getDeclaredMethod():此方法获得的是自身类的所有方法，包括<strong>公有(public)、私有(private)方法等，而且不受限于访问权限，但是限定本类(可以访问本身类的方法或者内部类的方法)</strong>。</li></ul><h2 id="8-setAccessible"><a href="#8-setAccessible" class="headerlink" title="8.setAccessible"></a>8.setAccessible</h2><p>➢Method和Field、Construictor对象都有setAccessible()方法。</p><p>➢setAccessible作用是启动和禁用访问安全检查的开关。</p><p>➢参数值为true则指示反射的对象在使用时应该取消Java语言访问检查。</p><p>➢提高反射的效率。如果代码中必须用反射，而该句代码需要频繁的被调用，那么请设置为true。➢使得原本无法访问的私有成员也可以访问</p><p>➢参数值为false则指示反射的对象应该实施Java语言访问检查</p><h2 id="9-反射操作泛型"><a href="#9-反射操作泛型" class="headerlink" title="9.反射操作泛型"></a>9.反射操作泛型</h2><p>➢Java采用泛型擦除的机制来引入泛型, Java中的泛型仅仅是给编译器javac使用的,确保数据的</p><p>安全性和免去强制类型转换问题,但是,一旦编译完成,所有和泛型有关的类型全部擦除</p><p>➢为了通过反射操作这些类型, Java新增了ParameterizedType , GenericArrayType,</p><p>TypeVariable和WildcardType几种类型来代表不能被归一到Class类中的类型但是又和原始类</p><p>型齐名的类型.</p><p>➢ParameterizedType :表示一种参数化类型,比如Collection<String></String></p><p>➢GenericArrayType :表示一种元素类型是参数化类型或者类型变量的数组类型     </p><p>➢TypeVariable :是各种类型变量的公共父接口</p><p>➢WildcardType :代表- -种通配符类型表达式</p><h2 id="10-使用反射机制读取注解信息"><a href="#10-使用反射机制读取注解信息" class="headerlink" title="10.使用反射机制读取注解信息"></a>10.使用反射机制读取注解信息</h2><table><thead><tr><th>类型</th><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Annotation</td><td>getAnnotation(Class annotationType)</td><td>若存在该元素的指定类型的注解，则返回这些注解，否则，返回 null</td></tr><tr><td>Annotation[]</td><td>getAnnotations()</td><td>返回此元素上存在的所有注解</td></tr><tr><td>Annotation[]</td><td>getDeclaredAnnotations()</td><td>返回该元素上已声明的所有注解，否则返回 null，使用该方法可以自由修改返回的数组</td></tr><tr><td>boolean</td><td>isAnnotationPresent(Class annotationType)</td><td>若指定类型的注解存在于此元素上，则返回 true，否则返回 false</td></tr></tbody></table><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.annotation.ElementType;<span class="hljs-keyword">import</span> java.lang.annotation.Retention;<span class="hljs-keyword">import</span> java.lang.annotation.RetentionPolicy;<span class="hljs-keyword">import</span> java.lang.annotation.Target;<span class="hljs-keyword">import</span> java.lang.reflect.Field;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test01</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;        <span class="hljs-comment">//通过反射获取Class对象</span>        Class sudent = Class.forName(<span class="hljs-string">"Sudent"</span>);        <span class="hljs-comment">//获取当前对象的所有属性</span>        Field name= sudent.getDeclaredField(<span class="hljs-string">"name"</span>);        <span class="hljs-comment">//获取某个注解</span>        myAnnotation annotation = name.getAnnotation(myAnnotation<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>;        <span class="hljs-comment">//获取注解的信息</span>        System.out.println(annotation);        System.out.println(annotation.fid());        System.out.println(annotation.length());        System.out.println(annotation.type());    &#125;&#125;<span class="hljs-comment">//实体类</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sudent</span></span>&#123;    <span class="hljs-meta">@myAnnotation</span>(fid = <span class="hljs-string">"吕"</span>,type = <span class="hljs-string">"String"</span>,length =<span class="hljs-number">5</span>)    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> id;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Sudent</span><span class="hljs-params">(String name, <span class="hljs-keyword">int</span> age, <span class="hljs-keyword">int</span> id)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;        <span class="hljs-keyword">this</span>.age = age;        <span class="hljs-keyword">this</span>.id = id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Sudent</span><span class="hljs-params">()</span> </span>&#123;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;        <span class="hljs-keyword">this</span>.name = name;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getAge</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> age;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age)</span> </span>&#123;        <span class="hljs-keyword">this</span>.age = age;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-keyword">return</span> id;    &#125;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setId</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;        <span class="hljs-keyword">this</span>.id = id;    &#125;&#125;<span class="hljs-comment">//自定义注解</span><span class="hljs-meta">@Target</span>(ElementType.FIELD)<span class="hljs-comment">//作用与属性上</span><span class="hljs-meta">@Retention</span>(RetentionPolicy.RUNTIME)<span class="hljs-comment">//作用时机</span><span class="hljs-meta">@interface</span> myAnnotation&#123;    <span class="hljs-function">String  <span class="hljs-title">fid</span><span class="hljs-params">()</span></span>;    <span class="hljs-function">String  <span class="hljs-title">type</span><span class="hljs-params">()</span></span>;    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span></span>;&#125;<span class="hljs-comment">//运行结果</span><span class="hljs-meta">@myAnnotation</span>(fid=<span class="hljs-string">"吕"</span>, type=<span class="hljs-string">"String"</span>, length=<span class="hljs-number">5</span>)吕<span class="hljs-number">5</span>String</code></pre><h1 id="三-类的加载与ClassLoader的理解"><a href="#三-类的加载与ClassLoader的理解" class="headerlink" title="三.类的加载与ClassLoader的理解"></a>三.类的加载与ClassLoader的理解</h1><h2 id="1-加载原理-加载，链接，初始化"><a href="#1-加载原理-加载，链接，初始化" class="headerlink" title="1.加载原理(加载，链接，初始化)"></a>1.加载原理(加载，链接，初始化)</h2><p><strong>➢加载:将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数   据结构,然后生成一个代表这个类的java.lang.Class对象.</strong></p><ul><li><p>通过类型的完全限定名，产生一个代表该类型的二进制数据流</p></li><li><p>解析这个二进制数据流为方法区内的内部数据结构</p></li><li><p>创建一个表示该类型的java.lang.Class类的实例</p></li></ul><p><strong>另外如果一个类装载器在预先装载的时遇到缺失或错误的class文件，它需要等到程序首次主动使用该类时才报告错误。</strong></p><p><strong>➢链接:将Java类的二进制代码合并到JVM的运行状态之中的过程。</strong></p><ul><li>验证:确保加载的类信息符合JVM规范，没有安全方面的问题</li><li>准备:正式为类变量(static) 分配内存并设置类变量默认初始值的阶段,这些内存都将在方法区中进行分配。</li><li>解析: 虚拟机常量池内的符号引用(常量名)替换为直接引用(地址)的过程。</li></ul><p><strong>➢初始化:</strong></p><ul><li>当创建某个类的新实例时（如通过new或者反射，克隆，反序列化等）</li><li>当调用某个类的静态方法时</li><li>当使用某个类或接口的静态字段时</li><li>当调用Java API中的某些反射方法时，比如类Class中的方法，或者java.lang.reflect中的类的方法时</li><li>当初始化某个子类时</li><li>当虚拟机启动某个被标明为启动类的类（即包含main方法的那个类）</li></ul><p><strong>Java编译器会收集所有的类变量初始化语句和类型的静态初始化器，将这些放到一个特殊的方法中：clinit()</strong>。</p><p><strong>static块的执行发生在“初始化”的阶段。初始化阶段，jvm主要完成对静态变量的初始化，静态块执行等工作。</strong></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.lv;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test02</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        A a=<span class="hljs-keyword">new</span> A();        System.out.println(a.m);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;    <span class="hljs-keyword">static</span>&#123;        System.out.println(<span class="hljs-string">"A类静态代码初始化"</span>);        m=<span class="hljs-number">300</span>;    &#125;    <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> m=<span class="hljs-number">100</span>;        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">A</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">"A的无参"</span>);    &#125;&#125;<span class="hljs-comment">//运行结果</span>A类静态代码初始化A的无参<span class="hljs-number">100</span></code></pre><p><img src="https://i.loli.net/2020/05/29/vRBCwWqDeNum4p3.png" srcset="/img/loading.gif" alt="QQ图片20200529122222.png"></p><h2 id="2-类加载器"><a href="#2-类加载器" class="headerlink" title="2.类加载器"></a>2.类加载器</h2><p>➢类加载的作用:将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang(Class对象)作为方法区中类数据的访问入口。</p><p>➢<strong>类缓存</strong>:标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载(缓存)一段时间。不过JVM垃圾回收机制可以回收这些Class对象</p><h2 id="3-类加载器的类型"><a href="#3-类加载器的类型" class="headerlink" title="3.类加载器的类型"></a>3.类加载器的类型</h2><p>在jvm中有三个内置类加载器，Bootstrap ClassLoader，Extension ClassLoader，Application ClassLoader。</p><p>Bootstrap ClassLoader：启动(根)类加载器，用于加载java核心库jre/lib/rt.jar。</p><p>Extension ClassLoader：扩展类加载器，用于加载java扩展库jre/ext/*.jar。</p><p>Application ClassLoader：应用程序(系统)类加载器，自己写的代码都是使用这个加载器来加载的。</p><p><img src="https://i.loli.net/2020/05/29/PrMZFofyUgLt7Wn.png" srcset="/img/loading.gif" alt="image-20200529100305226.png"></p><p><strong>双亲委派机制：自己定义一个类，通过自下往上的检查看看父类加载器是否已经定义了这个类，如果定义了，那么自己写的这个类就无效。</strong></p><p>例如：自己定义一个Java.lang.String类，发现父类加载器中已经定义了，我们自己的这个String类就无效了。</p><h1 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h1><p><img src="https://i.loli.net/2020/05/29/kUV1CqjQrHxXdY4.png" srcset="/img/loading.gif" alt="image-20200510090030648.png"></p><p>这里要注意一个重点，获取Class对象信息的时候是<strong>运行时</strong>，只有在<strong>运行时</strong>才能通过Class获取类的信息。</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mvaen</title>
    <link href="/2020/05/26/Java/Maven/"/>
    <url>/2020/05/26/Java/Maven/</url>
    
    <content type="html"><![CDATA[<h1 id="Mvaen"><a href="#Mvaen" class="headerlink" title="Mvaen"></a>Mvaen</h1><h2 id="1-我为什么要学习这个技术"><a href="#1-我为什么要学习这个技术" class="headerlink" title="1.我为什么要学习这个技术?"></a>1.我为什么要学习这个技术?</h2><p>1.在Javaweb开发中，需要使用大量的jar包，我们手动去导入;</p><p>2.如何能够让一个东西自动帮我导入和配置这个jar包。</p><p>由此，Maven诞生了!</p><h2 id="2-Maven项目架构管理工具"><a href="#2-Maven项目架构管理工具" class="headerlink" title="2.Maven项目架构管理工具"></a>2.Maven项目架构管理工具</h2><p>我们目前用来就是方便导入jar包的! .</p><p>Maven的核心思想:约定大于配置</p><p>●有约束，不要去违反</p><p><img src="https://i.loli.net/2020/05/27/SUkWvNyBZpTA2Rs.png" srcset="/img/loading.gif" alt="image-20200503094338353.png"></p><h2 id="3-配置MAVEN的环境变量"><a href="#3-配置MAVEN的环境变量" class="headerlink" title="3.配置MAVEN的环境变量"></a>3.配置MAVEN的环境变量</h2><p>   在我们的系统环境变量中</p><ul><li><p>配置如下配置</p><pre><code class="hljs dos">创建M2_HOME      maven目录下的bin目录      创建MAVEN_HOME    maven的目录        在系统的<span class="hljs-built_in">path</span>中配置   <span class="hljs-variable">%MAVEN_HOMEN%</span>\bin</code></pre><ul><li>然后命令行查看maven版本  </li></ul><pre><code class="hljs applescript">mvn -<span class="hljs-built_in">version</span></code></pre></li><li><p>测试Maven是否安装成功</p></li></ul><h2 id="4-阿里云镜像"><a href="#4-阿里云镜像" class="headerlink" title="4.阿里云镜像"></a>4.阿里云镜像</h2><ul><li>镜像： mirrors</li></ul><p>​        作用：加速我们的下载</p><ul><li><p>国内建议使用阿里云的镜像</p></li><li><p>在Maven目录下的 conf/settings.xml中的<mirrors>标签添加如下代码</mirrors></p></li></ul><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span>    <span class="hljs-comment">&lt;!--This sends everything else to /public --&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span></code></pre><h2 id="5-本地仓库"><a href="#5-本地仓库" class="headerlink" title="5.本地仓库"></a>5.本地仓库</h2><p>在本地仓库，远程仓库：</p><p><strong>建立一个本地仓库</strong>：Maven目录下的conf/ settings.xml中的<localRepository>标签添加如下代码</localRepository></p><ul><li>你要创建本地仓库的位置</li></ul><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\Maven\apache-maven-3.6.3-bin\apache-maven-3.6.3\maven-repo<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span></code></pre><h2 id="6-在idea中使用maven"><a href="#6-在idea中使用maven" class="headerlink" title="6.在idea中使用maven"></a>6.在idea中使用maven</h2><h3 id="1-模板"><a href="#1-模板" class="headerlink" title="1.模板"></a>1.模板</h3><p>   1.启动IDEA</p><p>   2.创建一个MAVEN的项目</p><p>   3.<img src="https://i.loli.net/2020/05/27/hNTnVXD7jlbrKO2.png" srcset="/img/loading.gif" alt="image-20200503100325085.png"></p><p>4.<img src="https://i.loli.net/2020/05/27/6dJ3ZbP8QmUlG4r.png" srcset="/img/loading.gif" alt="image-20200503100615226.png"></p><p>5.<img src="https://i.loli.net/2020/05/27/dTbJoQlskaUXNgc.png" srcset="/img/loading.gif" alt="image-20200503100746624.png"></p><p>6.<img src="https://i.loli.net/2020/05/27/bd83PuxAQ1YlCBR.png" srcset="/img/loading.gif" alt="image-20200503102709240.png"></p><p>7.<img src="https://i.loli.net/2020/05/27/heAcK4td7bmBRaJ.png" srcset="/img/loading.gif" alt="image-20200503111805878.png">))  </p><p>8.</p><p><img src="https://i.loli.net/2020/05/27/MTsSLNe9c3wWl87.png" srcset="/img/loading.gif" alt="image-20200503111945369.png"></p><h3 id="2-正常创建"><a href="#2-正常创建" class="headerlink" title="2.正常创建"></a>2.正常创建</h3><p><strong>不勾选内容，直接下一步</strong></p><p><img src="https://i.loli.net/2020/05/27/59OI6a7yKqesD4w.png" srcset="/img/loading.gif" alt="image-20200503112616511.png"></p><p>2.在web下</p><p><img src="https://i.loli.net/2020/05/27/4knAdhtjXgiNs7c.png" srcset="/img/loading.gif" alt="image-20200503112733663.png"></p><p>3.文件夹功能</p><p><img src="https://i.loli.net/2020/05/27/iPbUyc8JkGZKwn9.png" srcset="/img/loading.gif" alt="image-20200503112947032.png"></p><p><img src="https://i.loli.net/2020/05/27/B26vhLoncdKmsSG.png" srcset="/img/loading.gif" alt="image-20200503113202361.png"></p><h3 id="3-在idea中配置tomcat"><a href="#3-在idea中配置tomcat" class="headerlink" title="3.在idea中配置tomcat"></a>3.在idea中配置tomcat</h3><p>1.<strong>一般都在右上角</strong></p><p><img src="https://i.loli.net/2020/05/27/rSIBJjzMCGWhK8T.png" srcset="/img/loading.gif" alt="image-20200503113504440.png"></p><p>2.</p><p><img src="https://i.loli.net/2020/05/27/d8xwIeTcsVpK45n.png" srcset="/img/loading.gif" alt="image-20200503113646612.png"></p><p>3.</p><p><img src="https://i.loli.net/2020/05/27/5yKObPSB94aYXVi.png" srcset="/img/loading.gif" alt="image-20200503113907378.png"></p><p>4.</p><p><img src="https://i.loli.net/2020/05/27/bR7V6Ppclq4hBWm.png" srcset="/img/loading.gif" alt="image-20200503120748401.png"></p><p>5.</p><p><img src="https://i.loli.net/2020/05/27/aQW7PHzyBSuvUm4.png" srcset="/img/loading.gif" alt="image-20200503120830624.png"></p><p><img src="https://i.loli.net/2020/05/27/rCSL8XqVtmpYjAG.png" srcset="/img/loading.gif" alt="image-20200503121022062.png"></p><h2 id="7-pom文件"><a href="#7-pom文件" class="headerlink" title="7.pom文件"></a>7.pom文件</h2><p><strong>在<dependencies>标签中添加依赖</dependencies></strong></p><p><img src="https://s1.ax1x.com/2020/05/27/tAZLRI.png" srcset="/img/loading.gif" alt="tAZLRI.png"> </p><h2 id="8-解决Maven资源导出失败问题"><a href="#8-解决Maven资源导出失败问题" class="headerlink" title="8.解决Maven资源导出失败问题"></a>8.解决Maven资源导出失败问题</h2><p><strong>maven由于约定大于配置</strong>，我们之后会遇到我们写的配置文件，无法被导出或者生效的问题，解决方案：</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--在build中配置resource，防止我们资源导出失败的问题。--&gt;</span><span class="hljs-comment">&lt;!-- directory：指定资源所在的目录，目录的路径是相对于pom.xml文件的。</span><span class="hljs-comment">     includes：指定要包含哪些文件。</span><span class="hljs-comment">     filtering标签中：false表示不过滤，true表示过滤。</span><span class="hljs-comment">--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span>       <span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                   <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                   <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>               <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>           <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>           <span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span>                   <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.properties<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>                   <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.xml<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span>               <span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span>               <span class="hljs-tag">&lt;<span class="hljs-name">filtering</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">filtering</span>&gt;</span>           <span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span>       <span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span>   <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre><h2 id="9-目录树"><a href="#9-目录树" class="headerlink" title="9.目录树"></a>9.目录树</h2><p><img src="https://i.loli.net/2020/05/27/KeLrF9Cig2N5fuk.png" srcset="/img/loading.gif" alt="image-20200503161240131.png"></p><p><img src="https://i.loli.net/2020/05/27/cipPtXbg6TkmCQ5.png" srcset="/img/loading.gif" alt="image-20200503161253149.png"></p><h2 id="10-Maven仓库"><a href="#10-Maven仓库" class="headerlink" title="10.Maven仓库"></a>10.Maven仓库</h2><ul><li>地址：<a href="https://mvnrepository.com/" target="_blank" rel="noopener">https://mvnrepository.com/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
